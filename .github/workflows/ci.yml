name: CI

on:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_DIR: /tmp/.buildx-cache
  NETWORK_NAME: ci-net

jobs:
  test-hive-metastore:
    strategy:
      matrix:
        platform_tag: [amd64, arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load environment from .env file
        run: |
          echo "Loading env vars into GITHUB_ENV"
          grep -v '^#' .env | while read -r line; do
            echo "$line" >> $GITHUB_ENV
          done

      - name: Set METASTORE_DB_HOST dynamically
        run: echo "METASTORE_DB_HOST=pg-test-${{ matrix.platform_tag }}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}
          key: buildx-${{ matrix.platform_tag }}-${{ github.sha }}-${{ hashFiles('Dockerfile', 'versions.json') }}
          restore-keys: |
            buildx-${{ matrix.platform_tag }}-
            buildx-

      - name: Build image
        run: |
          docker buildx build \
            --platform linux/${{ matrix.platform_tag }} \
            --output=type=docker \
            --cache-from=type=local,src=${{ env.CACHE_DIR }} \
            --cache-to=type=local,dest=${{ env.CACHE_DIR }}-new \
            --build-arg PLATFORM_TAG=${{ matrix.platform_tag }} \
            --tag ci-local/hive-metastore:test \
            .
          rm -rf ${{ env.CACHE_DIR }}
          mv ${{ env.CACHE_DIR }}-new ${{ env.CACHE_DIR }}

      - name: Log Hive version and tarball used
        run: |
          echo "Resolved Hive Version:"
          jq -r 'to_entries[] | "\(.key) -> \(.value.version) [\(.value.sha256)]"' versions.json

      - name: Print critical env vars
        run: |
          echo "User: $METASTORE_DB_USER"
          echo "Pass: $METASTORE_DB_PASSWORD"
          echo "DB:   $METASTORE_DB"
          echo "Port: $METASTORE_DB_PORT"

      - name: Create Docker network
        run: docker network create ${{ env.NETWORK_NAME }}

      - name: Confirm Docker network exists
        run: docker network ls && docker network inspect ${{ env.NETWORK_NAME }} || true

      - name: Start PostgreSQL
        run: |
          docker run -d --network ${{ env.NETWORK_NAME }} \
            --name pg-test-${{ matrix.platform_tag }} \
            -e POSTGRES_USER=${{ env.METASTORE_DB_USER }} \
            -e POSTGRES_PASSWORD=${{ env.METASTORE_DB_PASSWORD }} \
            -e POSTGRES_DB=${{ env.METASTORE_DB }} \
            postgres:15

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            docker exec pg-test-${{ matrix.platform_tag }} pg_isready -U ${{ env.METASTORE_DB_USER }} -d ${{ env.METASTORE_DB }} && exit 0 || sleep 3
          done
          docker logs pg-test-${{ matrix.platform_tag }}
          exit 1

      - name: Run Hive Metastore
        run: |
          docker run -d --platform linux/${{ matrix.platform_tag }} --network ${{ env.NETWORK_NAME }} \
            --name metastore-test-${{ matrix.platform_tag }} \
            --env-file .env \
            -e METASTORE_DB_HOST=${{ env.METASTORE_DB_HOST }} \
            --health-start-period=360s \
            ci-local/hive-metastore:test

      - name: Wait for Hive to become healthy
        run: |
          echo "Waiting for container to start..."
          for i in {1..30}; do
            status=$(docker inspect --format='{{.State.Status}}' metastore-test-${{ matrix.platform_tag }})
            echo "Attempt $i: Container status is $status"
            if [ "$status" = "running" ]; then
              echo "Container is running, proceeding with readiness checks..."
              break
            fi
            sleep 5
          done

          echo "Polling for /tmp/metastore-ready inside container..."
          for i in {1..60}; do
            docker exec metastore-test-${{ matrix.platform_tag }} test -f /tmp/metastore-ready && {
              echo "Metastore is ready"
              exit 0
            }
            echo "Attempt $i: Not ready yet"
            sleep 10
          done

          echo "Hive Metastore failed to start in time"
          docker logs metastore-test-${{ matrix.platform_tag }}
          exit 1

      - name: Dump container logs on failure
        if: failure()
        run: |
          echo "PostgreSQL logs:"
          docker logs pg-test-${{ matrix.platform_tag }} || true
          echo "Hive Metastore logs:"
          docker logs metastore-test-${{ matrix.platform_tag }} || true

      - name: Clean up containers
        run: |
          docker rm -f metastore-test-${{ matrix.platform_tag }} || true
          docker rm -f pg-test-${{ matrix.platform_tag }} || true
