name: CI

on:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_DIR: /tmp/.buildx-cache
  NETWORK_NAME: ci-net

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    env:
      PLATFORM_TAG: ${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Load environment from .env file
        run: |
          echo "Loading env vars into GITHUB_ENV"
          while IFS='=' read -r key value; do
            if [[ ! "$key" =~ ^# && -n "$key" ]]; then
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done < .env

      - name: Override REGISTRY_IMAGE for CI use
        run: echo "REGISTRY_IMAGE=ci-local/hive-metastore" >> $GITHUB_ENV

      - name: Set up Docker with containerd
        uses: docker/setup-docker-action@v4.0.0
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:buildx-stable-1
          buildkitd-flags: --debug
          install: true
          use: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}
          key: buildx-${{ env.PLATFORM_TAG }}-${{ hashFiles('Dockerfile', 'versions.json') }}
          restore-keys: |
            buildx-${{ env.PLATFORM_TAG }}-
            buildx-

      - name: Create Docker network
        run: docker network create ${{ env.NETWORK_NAME }}

      - name: Build Docker image
        run: |
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --output=type=oci,dest=./ci-test-${{ env.PLATFORM_TAG }}.tar \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --tag ${{ env.REGISTRY_IMAGE }}:ci-test-${{ env.PLATFORM_TAG }} \
            .
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Load Docker image
        run: docker load -i ./ci-test-${{ env.PLATFORM_TAG }}.tar

      - name: Start PostgreSQL
        run: |
          docker run -d --network ${{ env.NETWORK_NAME }} \
            --name pg-test-matrix-${{ env.PLATFORM_TAG }} \
            -e POSTGRES_DB=${{ env.POSTGRES_DB }} \
            -e POSTGRES_USER=${{ env.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
            -p ${{ env.METASTORE_DB_PORT }}:${{ env.METASTORE_DB_PORT }} \
            postgres:15

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            docker exec pg-test-matrix-${{ env.PLATFORM_TAG }} pg_isready -U ${{ env.POSTGRES_USER }} && exit 0 || sleep 3
          done
          docker logs pg-test-matrix-${{ env.PLATFORM_TAG }}
          exit 1

      - name: Run Hive Metastore
        run: |
          docker run -d --platform ${{ matrix.platform }} --network ${{ env.NETWORK_NAME }} \
            --name metastore-test-matrix-${{ env.PLATFORM_TAG }} \
            -e METASTORE_DB_HOST=pg-test-matrix-${{ env.PLATFORM_TAG }} \
            -e METASTORE_DB_PORT=${{ env.METASTORE_DB_PORT }} \
            -e METASTORE_DB_NAME=${{ env.POSTGRES_DB }} \
            -e METASTORE_DB_USER=${{ env.POSTGRES_USER }} \
            -e METASTORE_DB_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
            -p ${{ env.METASTORE_PORT }}:${{ env.METASTORE_PORT }} \
            ${{ env.REGISTRY_IMAGE }}:ci-test-${{ env.PLATFORM_TAG }}

      - name: Check health status
        run: |
          for i in {1..10}; do
            health=$(docker inspect --format='{{.State.Health.Status}}' metastore-test-matrix-${{ env.PLATFORM_TAG }})
            if [ "$health" = "healthy" ]; then exit 0; fi
            sleep 5
          done
          docker inspect metastore-test-matrix-${{ env.PLATFORM_TAG }}
          docker logs metastore-test-matrix-${{ env.PLATFORM_TAG }}
          exit 1

      - name: Validate versions.json
        if: matrix.platform == 'linux/amd64'
        run: jq -e 'has("hive") and has("postgresql")' versions.json

      - name: Install ShellCheck
        if: matrix.platform == 'linux/amd64'
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Lint shell scripts
        if: matrix.platform == 'linux/amd64'
        run: shellcheck docker-entrypoint.sh healthcheck.sh

      - name: Clean up containers
        if: always()
        run: |
          docker rm -f metastore-test-matrix-${{ env.PLATFORM_TAG }} || true
          docker rm -f pg-test-matrix-${{ env.PLATFORM_TAG }} || true

      - name: Save logs
        if: always()
        run: |
          mkdir -p artifacts
          docker logs metastore-test-matrix-${{ env.PLATFORM_TAG }} 2>&1 | sed -E 's/(password=)[^&"]+/\1****/g' | sed -E 's/(jdbc:[^ ]+):\/\/[^ ]+/\1:\/\/REDACTED/g' > artifacts/metastore-matrix-${{ env.PLATFORM_TAG }}.log || true
          docker logs pg-test-matrix-${{ env.PLATFORM_TAG }} 2>&1 | sed -E 's/(password=)[^&"]+/\1****/g' | sed -E 's/(jdbc:[^ ]+):\/\/[^ ]+/\1:\/\/REDACTED/g' > artifacts/postgres-matrix-${{ env.PLATFORM_TAG }}.log || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-matrix-${{ env.PLATFORM_TAG }}
          path: artifacts/
